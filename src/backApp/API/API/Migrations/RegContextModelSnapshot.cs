// <auto-generated />
using System;
using API.Models.Users;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(RegContext))]
    partial class RegContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.3");

            modelBuilder.Entity("API.Models.Devices.DeviceCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DeviceCategory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Consumer"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Producer"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Storage"
                        });
                });

            modelBuilder.Entity("API.Models.Devices.DeviceInfo", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<long>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<long>("TypeId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Wattage")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TypeId");

                    b.ToTable("DeviceInfo", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6420b43190d65ae1554350a9",
                            CategoryId = 1L,
                            Manufacturer = "VOX",
                            Name = "Frižider KG2500F",
                            TypeId = 1L,
                            Wattage = 0.040000000000000001
                        },
                        new
                        {
                            Id = "6420b43190d65ae1554350ae",
                            CategoryId = 1L,
                            Manufacturer = "LG",
                            Name = "TV 50UQ80003LB.AEU",
                            TypeId = 2L,
                            Wattage = 0.17999999999999999
                        },
                        new
                        {
                            Id = "6420b43190d65ae1554350ab",
                            CategoryId = 1L,
                            Manufacturer = "Gorenje",
                            Name = "Kombinovani frižider NRK6191EW4",
                            TypeId = 1L,
                            Wattage = 0.083000000000000004
                        },
                        new
                        {
                            Id = "6420b43190d65ae1554350aa",
                            CategoryId = 1L,
                            Manufacturer = "LG",
                            Name = "Kombinovani frižider GBF71PZDMN",
                            TypeId = 1L,
                            Wattage = 0.069000000000000006
                        },
                        new
                        {
                            Id = "6420b43190d65ae1554350ad",
                            CategoryId = 1L,
                            Manufacturer = "SAMSUNG",
                            Name = "TV UE55AU7172UXXH SMART",
                            TypeId = 2L,
                            Wattage = 0.070999999999999994
                        },
                        new
                        {
                            Id = "6420b43190d65ae1554350ac",
                            CategoryId = 1L,
                            Manufacturer = "Philips",
                            Name = "SMART Televizor 32PHS6605/12",
                            TypeId = 2L,
                            Wattage = 0.12
                        },
                        new
                        {
                            Id = "6420b43190d65ae1554350b1",
                            CategoryId = 1L,
                            Manufacturer = "Gorenje",
                            Name = "GE6A40WB Električni šporet",
                            TypeId = 3L,
                            Wattage = 2.1000000000000001
                        },
                        new
                        {
                            Id = "6420b43190d65ae1554350b0",
                            CategoryId = 1L,
                            Manufacturer = "Tesla",
                            Name = "Električni šporet CS6400SX",
                            TypeId = 3L,
                            Wattage = 1.5
                        },
                        new
                        {
                            Id = "6420b43190d65ae1554350af",
                            CategoryId = 1L,
                            Manufacturer = "BEKO",
                            Name = "FSE64320DS Kombinovani šporet",
                            TypeId = 3L,
                            Wattage = 2.2999999999999998
                        },
                        new
                        {
                            Id = "6420b43190d65ae1554350b4",
                            CategoryId = 1L,
                            Manufacturer = "VIVAX",
                            Name = "Ventilator FS-451TB",
                            TypeId = 4L,
                            Wattage = 0.029999999999999999
                        },
                        new
                        {
                            Id = "6420b43190d65ae1554350b3",
                            CategoryId = 1L,
                            Manufacturer = "BEKO",
                            Name = "Klima uređaj 180/BBFDB 181",
                            TypeId = 4L,
                            Wattage = 1.8
                        },
                        new
                        {
                            Id = "6420b43190d65ae1554350b2",
                            CategoryId = 1L,
                            Manufacturer = "Tesla",
                            Name = "TT27X81-09410A Klima uređaj",
                            TypeId = 4L,
                            Wattage = 0.72999999999999998
                        },
                        new
                        {
                            Id = "6420b43190d65ae1554350b6",
                            CategoryId = 1L,
                            Manufacturer = "Panasonic",
                            Name = "Mikrotalasna rerna NN-DF383BEPG",
                            TypeId = 5L,
                            Wattage = 0.40000000000000002
                        },
                        new
                        {
                            Id = "6420b43190d65ae1554350b5",
                            CategoryId = 1L,
                            Manufacturer = "LG",
                            Name = "Mikrotalasna rerna MH6336GIB",
                            TypeId = 5L,
                            Wattage = 0.59999999999999998
                        },
                        new
                        {
                            Id = "6420b43190d65ae1554350b8",
                            CategoryId = 1L,
                            Manufacturer = "Bosch",
                            Name = "Mašina za pranje sudova SMS4HVW33E",
                            TypeId = 6L,
                            Wattage = 1.5
                        },
                        new
                        {
                            Id = "6420b43190d65ae1554350b7",
                            CategoryId = 1L,
                            Manufacturer = "Gorenje",
                            Name = "Mašina za pranje sudova GS520E15W",
                            TypeId = 6L,
                            Wattage = 1.2
                        },
                        new
                        {
                            Id = "6420b43190d65ae1554350bc",
                            CategoryId = 1L,
                            Manufacturer = "DELL",
                            Name = "Inspiron 5402 - NOT19604",
                            TypeId = 8L,
                            Wattage = 0.040000000000000001
                        },
                        new
                        {
                            Id = "6420b43190d65ae1554350bb",
                            CategoryId = 1L,
                            Manufacturer = "HP",
                            Name = "290 G3 - 123P9EA",
                            TypeId = 8L,
                            Wattage = 0.14999999999999999
                        },
                        new
                        {
                            Id = "6420b43190d65ae1554350ba",
                            CategoryId = 1L,
                            Manufacturer = "Intel",
                            Name = "NUC BNUC11TNHI50002 Računar",
                            TypeId = 8L,
                            Wattage = 0.059999999999999998
                        },
                        new
                        {
                            Id = "6420b43190d65ae1554350c2",
                            CategoryId = 1L,
                            Manufacturer = "Gorenje",
                            Name = "DNE8B Mašina za sušenje veša",
                            TypeId = 10L,
                            Wattage = 2.7000000000000002
                        },
                        new
                        {
                            Id = "6420b43190d65ae1554350c1",
                            CategoryId = 1L,
                            Manufacturer = "Bosch",
                            Name = "Mašina za sušenje veša WTX87KH1BY",
                            TypeId = 10L,
                            Wattage = 2.0
                        },
                        new
                        {
                            Id = "6420b43190d65ae1554350c0",
                            CategoryId = 1L,
                            Manufacturer = "Miele",
                            Name = "Mašina za pranje veša WED135 WPS",
                            TypeId = 9L,
                            Wattage = 0.69999999999999996
                        },
                        new
                        {
                            Id = "6420b43190d65ae1554350bf",
                            CategoryId = 1L,
                            Manufacturer = "Gorenje",
                            Name = "Mašina za pranje veša WNEI94ADS",
                            TypeId = 9L,
                            Wattage = 0.5
                        },
                        new
                        {
                            Id = "6420b43190d65ae1554350cb",
                            CategoryId = 1L,
                            Manufacturer = "Metalac",
                            Name = "Bojler Hydra EZV P50 R",
                            TypeId = 14L,
                            Wattage = 10.199999999999999
                        },
                        new
                        {
                            Id = "6420b43190d65ae1554350ca",
                            CategoryId = 1L,
                            Manufacturer = "Gorenje",
                            Name = "Bojler TGR50SMT",
                            TypeId = 14L,
                            Wattage = 8.0
                        },
                        new
                        {
                            Id = "6420b43190d65ae1554350d0",
                            CategoryId = 1L,
                            Manufacturer = "Radialight",
                            Name = "Grejalica SIRIO 20",
                            TypeId = 18L,
                            Wattage = 1.5
                        },
                        new
                        {
                            Id = "642339d634ce75fedb564cc8",
                            CategoryId = 2L,
                            Manufacturer = "Felicity",
                            Name = "Solarni panel 165M monokristalni",
                            TypeId = 19L,
                            Wattage = 0.34999999999999998
                        },
                        new
                        {
                            Id = "642339d634ce75fedb564cc9",
                            CategoryId = 2L,
                            Manufacturer = "SD",
                            Name = "SD2 Wind Turbine",
                            TypeId = 20L,
                            Wattage = 1.5
                        });
                });

            modelBuilder.Entity("API.Models.Devices.DeviceType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("DeviceType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CategoryId = 1L,
                            Name = "Fridge"
                        },
                        new
                        {
                            Id = 2L,
                            CategoryId = 1L,
                            Name = "Tv"
                        },
                        new
                        {
                            Id = 3L,
                            CategoryId = 1L,
                            Name = "Oven"
                        },
                        new
                        {
                            Id = 4L,
                            CategoryId = 1L,
                            Name = "AC"
                        },
                        new
                        {
                            Id = 5L,
                            CategoryId = 1L,
                            Name = "Micowave"
                        },
                        new
                        {
                            Id = 6L,
                            CategoryId = 1L,
                            Name = "Dishwasher"
                        },
                        new
                        {
                            Id = 8L,
                            CategoryId = 1L,
                            Name = "PC"
                        },
                        new
                        {
                            Id = 9L,
                            CategoryId = 1L,
                            Name = "Washing Machine"
                        },
                        new
                        {
                            Id = 10L,
                            CategoryId = 1L,
                            Name = "Dryer"
                        },
                        new
                        {
                            Id = 14L,
                            CategoryId = 1L,
                            Name = "Boiler"
                        },
                        new
                        {
                            Id = 18L,
                            CategoryId = 1L,
                            Name = "Heater"
                        },
                        new
                        {
                            Id = 19L,
                            CategoryId = 2L,
                            Name = "Solar Panel"
                        },
                        new
                        {
                            Id = 20L,
                            CategoryId = 2L,
                            Name = "Wind Turbine"
                        });
                });

            modelBuilder.Entity("API.Models.Devices.ProsumerLink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Activity")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DsoControl")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DsoView")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ModelId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProsumerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.HasIndex("ProsumerId");

                    b.ToTable("ProsumerLinks", (string)null);
                });

            modelBuilder.Entity("API.Models.ElectricityPrice", b =>
                {
                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL");

                    b.HasKey("Timestamp");

                    b.ToTable("ElectricityPrices", (string)null);
                });

            modelBuilder.Entity("API.Models.Users.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("City", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Kragujevac"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Topola"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Čačak"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Beograd"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Smederevo"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Lazarevac"
                        },
                        new
                        {
                            Id = 7L,
                            Name = "Smederevska Palanka"
                        },
                        new
                        {
                            Id = 8L,
                            Name = "Mladenovac"
                        },
                        new
                        {
                            Id = 9L,
                            Name = "Aranđelovac"
                        },
                        new
                        {
                            Id = 10L,
                            Name = "Gornji Milanovac"
                        },
                        new
                        {
                            Id = 11L,
                            Name = "Rekovac"
                        },
                        new
                        {
                            Id = 12L,
                            Name = "Kraljevo"
                        },
                        new
                        {
                            Id = 13L,
                            Name = "Jagodina"
                        },
                        new
                        {
                            Id = 14L,
                            Name = "Velika Plana"
                        },
                        new
                        {
                            Id = 15L,
                            Name = "Varvarin"
                        });
                });

            modelBuilder.Entity("API.Models.Users.Dso", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateCreate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar (10)");

                    b.Property<byte[]>("HashPassword")
                        .HasColumnType("varbinary (2048)");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar (20)");

                    b.Property<string>("RegionId")
                        .HasColumnType("TEXT");

                    b.Property<long?>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("Salary")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("SaltPassword")
                        .HasColumnType("varbinary (2048)");

                    b.Property<string>("Token")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("TokenExpiry")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar (30)");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Username" }, "IX_DSO_Username")
                        .IsUnique();

                    b.ToTable("DSO", (string)null);
                });

            modelBuilder.Entity("API.Models.Users.Neigborhood", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<long>("CityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NeigbName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Neigborhood", (string)null);
                });

            modelBuilder.Entity("API.Models.Users.Prosumer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("VARCHAR (120)");

                    b.Property<long?>("CityId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CityID");

                    b.Property<string>("DateCreate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar (20)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar (10)");

                    b.Property<byte[]>("HashPassword")
                        .HasColumnType("varbinary (2048)");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar (20)");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar (10)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar (10)");

                    b.Property<string>("NeigborhoodId")
                        .HasColumnType("TEXT")
                        .HasColumnName("NeigborhoodID");

                    b.Property<string>("RegionId")
                        .HasColumnType("TEXT")
                        .HasColumnName("RegionID");

                    b.Property<long?>("RoleId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("RoleID");

                    b.Property<byte[]>("SaltPassword")
                        .HasColumnType("varbinary (2048)");

                    b.Property<string>("Token")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("TokenExpiry")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar (30)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("NeigborhoodId");

                    b.HasIndex("RegionId");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Username" }, "IX_Prosumer_Username")
                        .IsUnique();

                    b.ToTable("Prosumer", (string)null);
                });

            modelBuilder.Entity("API.Models.Users.Region", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegionName" }, "IX_Region_RegionName")
                        .IsUnique();

                    b.ToTable("Region", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8963cd78-afa4-4723-9b67-331a3fc180f8",
                            RegionName = "Šumadija"
                        });
                });

            modelBuilder.Entity("API.Models.Users.Role", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "IX_Role_Id")
                        .IsUnique();

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            RoleName = "Dso"
                        },
                        new
                        {
                            Id = 2L,
                            RoleName = "WorkerDso"
                        },
                        new
                        {
                            Id = 3L,
                            RoleName = "Prosumer"
                        });
                });

            modelBuilder.Entity("API.Models.Devices.DeviceInfo", b =>
                {
                    b.HasOne("API.Models.Devices.DeviceCategory", "Category")
                        .WithMany("Devices")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Devices.DeviceType", "Type")
                        .WithMany("Devices")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("API.Models.Devices.DeviceType", b =>
                {
                    b.HasOne("API.Models.Devices.DeviceCategory", "Category")
                        .WithMany("Types")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("API.Models.Devices.ProsumerLink", b =>
                {
                    b.HasOne("API.Models.Devices.DeviceInfo", "Device")
                        .WithMany("Links")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Users.Prosumer", "Prosumer")
                        .WithMany("Links")
                        .HasForeignKey("ProsumerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Prosumer");
                });

            modelBuilder.Entity("API.Models.Users.Dso", b =>
                {
                    b.HasOne("API.Models.Users.Region", "Region")
                        .WithMany("Dsos")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Models.Users.Role", "Role")
                        .WithMany("Dsos")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Region");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("API.Models.Users.Neigborhood", b =>
                {
                    b.HasOne("API.Models.Users.City", "City")
                        .WithMany("Neighborhoods")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("API.Models.Users.Prosumer", b =>
                {
                    b.HasOne("API.Models.Users.City", "City")
                        .WithMany("Prosumers")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Models.Users.Neigborhood", "Neigborhood")
                        .WithMany("Prosumers")
                        .HasForeignKey("NeigborhoodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Models.Users.Region", "Region")
                        .WithMany("Prosumers")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Models.Users.Role", "Role")
                        .WithMany("Prosumers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("City");

                    b.Navigation("Neigborhood");

                    b.Navigation("Region");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("API.Models.Devices.DeviceCategory", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("Types");
                });

            modelBuilder.Entity("API.Models.Devices.DeviceInfo", b =>
                {
                    b.Navigation("Links");
                });

            modelBuilder.Entity("API.Models.Devices.DeviceType", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("API.Models.Users.City", b =>
                {
                    b.Navigation("Neighborhoods");

                    b.Navigation("Prosumers");
                });

            modelBuilder.Entity("API.Models.Users.Neigborhood", b =>
                {
                    b.Navigation("Prosumers");
                });

            modelBuilder.Entity("API.Models.Users.Prosumer", b =>
                {
                    b.Navigation("Links");
                });

            modelBuilder.Entity("API.Models.Users.Region", b =>
                {
                    b.Navigation("Dsos");

                    b.Navigation("Prosumers");
                });

            modelBuilder.Entity("API.Models.Users.Role", b =>
                {
                    b.Navigation("Dsos");

                    b.Navigation("Prosumers");
                });
#pragma warning restore 612, 618
        }
    }
}
